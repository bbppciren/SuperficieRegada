
/*******************************************************************************
 * Modulos *
 * Import all the modules from other scripts
 ******************************************************************************/
var startTime = new Date().getTime();

var ImgClass = require('users/corfobbppciren2023/App_SR_User:Img_collection'); 
var catClass = require('users/corfobbppciren2023/App_SR_User:CatastroFruticola'); 
var usoClass = require('users/corfobbppciren2023/App_SR_User:usoSuelo'); 
var init = require('users/corfobbppciren2023/App_SR_User:inicio');
var ShacClass = require('users/corfobbppciren2023/App_SR_User:Shacs'); 
var leyenda = require('users/corfobbppciren2023/App_SR_User:Leyenda');
var chartUtils = require('users/corfobbppciren2023/App_SR_User:chartUtils');
var s = require('users/corfobbppciren2023/App_SR_User:Style').styles; 

var region = ee.FeatureCollection("projects/ee-corfobbppciren2023/assets/Geometrias/Region_de_Valparaiso_4326_corregido");
var shac_layer = ee.FeatureCollection("projects/ee-corfobbppciren2023/assets/Geometrias/SHACs_V_Region_MOD");
var uso_suelo = ee.FeatureCollection("projects/ee-corfobbppciren2023/assets/Uso_de_Suelo/cut_valparaiso_2020");
var Rcat_frut = ee.FeatureCollection("projects/ee-corfobbppciren2023/assets/Catastro_fruticola/prod_frutic_ide_05_2023_1_2_MOD");

var valparaisoComunas = ee.FeatureCollection("projects/ee-corfobbppciren2023/assets/Geometrias/ComunasValparaiso");
var cat_frut = Rcat_frut.style(s.catFrutStyle);

var c = {}; // Define a JSON object for storing UI components.
var disp_year = init.getTemp();
var exceptions = init.getExceptions();
var claves = Object.keys(exceptions);
var maxLengthExceptions = init.getMaxLength();
var shac_names = init.shac_names;
var listAssets  = init.listAsset;
var basePath = "users/corfobbppciren2023/SR/";

var tablaArea = null; //tabla para almacenar estadisticas por SHAC

var ClaseStyles = init.ClaseStyles;
uso_suelo = uso_suelo.map(function(feature) {
  return feature.set('style', ClaseStyles.get(feature.get('CLASE')));
});
var styledUsoSuelo = uso_suelo.style({
  styleProperty: 'style',
});
/*******************************************************************************
 * Funciones internas *
 * 
 * Una sección para definir las funciones que se utilizaran internamente
 ******************************************************************************/

function layerExists(layers, layerName) {
  var exists = false;
  layers.forEach(function(layer) {
    if (layer.getName() === layerName) {  // Comprobar si el nombre coincide
      exists = true;
      
    }
  });
  
  return exists;
}

function layerVisible(layers, layerName) {
  var exists = false;
  layers.forEach(function(layer) {
    if (layer.getName() === layerName && layer.getShown()) {  // Comprobar si el nombre coincide y esta visible
      exists = true;
      
    }
  });

  return exists;
}

/*******************************************************************************
 * Components *
 * 
 * A section to define the widgets that will compose your app.
 * 
 * Guidelines:
 * 1. Except for static text and constraints, accept default values;
 *    initialize them in the initialization section.
 * 2. Limit composition of widgets to those belonging to an inseparable unit
 *    (i.e. a group of widgets that would make no sense out of order). 
 ******************************************************************************/

// Licencias
c.licencias = {};
c.licencias.copernicus = ui.Label(
  'Los datos de Sentinel-2 y Sentinel-1 son proporcionados por el programa Copernicus' 
  +'de la Unión Europea y procesados por la Agencia Espacial Europea (ESA).' +
'Fuente: Copernicus Open Access Hub (https://scihub.copernicus.eu/).');
c.licencias.nasa = ui.Label(
  'Los datos del modelo digital de elevación (NASADEM) son proporcionados por la NASA.'+
'Fuente: NASA Earth Science Division (https://earthdata.nasa.gov/).');
c.licencias.chirps = ui.Label(
  'Los datos de precipitación CHIRPS son proporcionados por el Climate Hazards Group' +
  'de la Universidad de California en Santa Bárbara (UCSB).'+
'Fuente: UCSB-CHG (https://www.chc.ucsb.edu/data/chirps).');

var panelLicencias = ui.Panel([
  c.licencias.copernicus,
  c.licencias.nasa,
  c.licencias.chirps
]);

// Define a control panel for user input.
c.controlPanel = ui.Panel();

// Define a series of panel widgets to be used as horizontal dividers.
c.dividers = {};
c.dividers.divider1 = ui.Panel();
c.dividers.divider2 = ui.Panel();
c.dividers.divider3 = ui.Panel();
c.dividers.divider4 = ui.Panel();
c.dividers.divider5 = ui.Panel();
// Define the main interactive map.
c.map = ui.Map();
c.map.setOptions("ROADMAP");

// Define an app info widget group.
c.info = {};
c.info.titleLabel = ui.Label('Superficie Regada');
c.info.aboutLabel = ui.Label(
  'Producto de superficie regada de las últimas tres temporadas,' +
  ' por SHACS de la región.' +
  ' Mediante un click, seleccione un punto de interés para obtener ' +
  'información del SHAC.');
c.info.paperLabel = ui.Label({
  value: 'Repositorio GitHub',
  targetUrl: 'https://github.com/jvaldiviesob/Humedad_de_Suelo'
});
c.info.websiteLabel = ui.Label({
  value: 'Publicación de referencia',
  targetUrl: 'https://www.nature.com/articles/s41597-023-02011-7'
});
c.info.panel = ui.Panel([
  c.info.titleLabel, c.info.aboutLabel,
  //c.info.paperLabel, c.info.websiteLabel
]);

//posicion capas: [REGION, SHAC, SR|FRUT|SUELO]


//region
var styled_region = region.style(s.visParams_region);
var layer_region = ui.Map.Layer(styled_region, {}, 'Región de Valparaíso');
c.map.layers().add(layer_region); //queda en posicion 1



// Define a data year selector widget group.
c.selectSHAC = {};
c.selectSHAC.warning = ui.Label('', {
  color: 'red',
  fontSize: '12px'
});
c.selectSHAC.label = ui.Label('Resultados Modelo de Superficie Regada');
c.selectSHAC.selector = ui.Select({
  items:shac_names,
  placeholder: 'Seleccione un SHAC',
  onChange: function(selectedSHAC) {

  print('selectedSHAC hoy', selectedSHAC);
    // 0. Reiniciar etiquetas 
    resetLabels();
    
    // 1. Reiniciar el selector de Band
    c.selectBand.selector.setValue(null);
    c.selectBand.selector.setDisabled(true);
    
    // 2. Eliminar capas highlighted y de Superficie Regada
    var layers = c.map.layers();
    for (var i = 0; i < layers.length(); i++) {
      var layer = layers.get(i);
      
    if (layer.getName().indexOf('Superficie regada') !== -1) {
    c.map.remove(layer);
    i--;
  }
       if (layer.getName() === 'Superficie regada histórica') {
        c.map.remove(layer);
        
      }
      if (layer.getName() === 'SHAC seleccionado') {
        c.map.remove(layer);
        break;
      }
    }
    // 3. Zoom hacia SHAC y habilitar temporada
    var catFrutExist = layerExists(layers, 'Catastro Frutícola');
    var usExist = layerExists(layers, 'Uso de Suelo');
    var catFrutVis = layerVisible(layers, 'Catastro Frutícola');
    var usVis = layerVisible(layers, 'Uso de Suelo');
    if (selectedSHAC) {
        if(catFrutVis || usVis){
          c.selectSHAC.warning.setValue('Para mejor visualización de la superficie regada quite la(s) capa(s) de Uso de Suelo y/o Catastro Frutiícola');
        }
      // Zoom hacia el SHAC
      ShacClass.zoomSHAC(selectedSHAC, shac_layer, c.map);
      // Habilitar el selector de Band si hay un SHAC seleccionado
      c.selectBand.selector.setDisabled(false);
    }
    
    // 4. Reiniciar sup regada historica
    c.historica.boton.setDisabled(true);
    c.historica.boton.setLabel('Agregar sup. regada historica');
    
    //5. Estadisticas SHAC
    var shpSHAC = [selectedSHAC.replace(/\s*-\s*/g, ' ').split(' ').join('_')];
    var featuresConArea = disp_year.map(function(periodo) {
    var assetId = basePath + periodo + "_SHAC_" + shpSHAC;
    var fc = ee.FeatureCollection(assetId);
    var areaHa = ee.Number(fc.geometry().area()).divide(10000);
    return ee.Feature(null, {
      periodo: periodo,
      area_ha: areaHa
    });
  });
  
    // Crea tu "DataFrame" como FeatureCollection
  tablaArea = ee.FeatureCollection(featuresConArea);
  print('tablaArea', tablaArea);

 // 5. Agregar grafico de sup. regada por temporada
    



      // 5.2 Llamo al módulo chartUtils y obtengo el widget
      var newChart = chartUtils.chartArea(shpSHAC, tablaArea);
    
      // 5.3 Si ya había uno, quitarlo
      if (chartWidget) {
        c.map.remove(chartWidget);
      }
      // 5.4 Añadir el nuevo
      chartWidget = newChart;
      c.map.add(chartWidget);


  }
});

c.selectSHAC.panel = ui.Panel([c.selectSHAC.label, c.selectSHAC.selector]);

// Definir grupo de descarga para SR
c.downloadBand = {}; //Etiqueta de descarga que se actualizará dinámicamente
c.downloadBand.title = ui.Label('');

//Cantidad de ui.Label a agregar es dinamica segun el tamano de los valores de las listas
//del diccionario exceptions.
c.downloadBand.kmlLabel = [ui.Label('')]; 
for (var i = 0; i < maxLengthExceptions-1; i++) {
  c.downloadBand.kmlLabel.push(ui.Label('')); // Agregar un nuevo ui.Label a la lista
}

c.downloadBand.gjsonLabel = [ui.Label('')];
for (var i = 0; i < maxLengthExceptions-1; i++) {
  c.downloadBand.gjsonLabel.push(ui.Label('')); // Agregar un nuevo ui.Label a la lista
}

// Define a data band selector widget group.

c.selectBand = {};

c.selectBand.selector = ui.Select({
  items: disp_year,
  placeholder: 'Seleccione una temporada',
  onChange: function(selectedBand) {
    var selectedSHAC = c.selectSHAC.selector.getValue();
      if (selectedBand) {

      // 0. Reiniciar etiquetas
      resetLabels();

      var newlink = ImgClass.collection(basePath, selectedSHAC, selectedBand,exceptions,claves,c,s);
      if(newlink.length > 0){
                for(var i = 0; i < newlink.length; i++){
        //1. Agregar layer
        var layer = ui.Map.Layer(newlink[i], {}, 'Superficie regada ' + (i + 1));
        c.map.layers().set(i + 2, layer);
          
          //2. Editar labels
          
          var downloadUrlKML = newlink[i].getDownloadURL({format: 'kml'});
          c.downloadBand.kmlLabel[i].setValue('Descarga KML ('+ (i+1) +'/' + newlink.length+')');
          c.downloadBand.kmlLabel[i].setUrl(downloadUrlKML);
          c.downloadBand.kmlLabel[i].style().set(s.ableLabel);
          
          var downloadUrlGeo = newlink[i].getDownloadURL({format: 'geojson'});
          c.downloadBand.gjsonLabel[i].setValue('Descarga GeoJSON ('+ (i+1) +'/' + newlink.length+')');
          c.downloadBand.gjsonLabel[i].setUrl(downloadUrlGeo);
          c.downloadBand.gjsonLabel[i].style().set(s.ableLabel);
        }
        
        // 3. Reiniciar sup. regada historico
        c.historica.boton.setLabel('Agregar sup. regada historica');
        var layers = c.map.layers();
      for (var j = layers.length() - 1; j >= 0; j--) {
        var layerU = layers.get(j);
        
        if (layerU.getName() ==='Superficie regada histórica') {
          layers.remove(layerU); // Eliminar la capa
        }
      }
      
      c.downloadBand.title.setValue('Descargar Superficie Regada');
      c.downloadBand.title.style().set(s.widgetTitle);
      c.historica.boton.setDisabled(false);

        }else{
        c.selectSHAC.warning.setValue('No existe imagen para la selección');
        }
      }  
    }
});


c.selectBand.panel = ui.Panel([ c.selectBand.selector]);

c.downloadBand.panel = ui.Panel([
  c.downloadBand.title,
  c.downloadBand.kmlLabel[0],
  c.downloadBand.gjsonLabel[0]// Agregar etiquetas de GeoJSON
]);

//MODULO PARA AGREGAR CAPAS HISTORICAS


var visParamsHist = {
  color: '00FF00', // Verde
};

c.historica = {};
c.historica.warning = ui.Label('', {
  color: 'red',
  fontSize: '12px'
});
c.historica.titleLabel = ui.Label('Superficie Regada Histórica');
c.historica.info = ui.Label('Información desarrollada por CIREN para proyecto “Transferencia ' +
'de tecnologías de información para pequeños y medianos agricultores de la Región de Valparaíso” (CODIGO BIP 40046312-0), ' +
'a partir de información satelital y encuestas en terreno. '+
'Disponible hasta la temporada 2022_2023');
c.historica.boton = ui.Button({
  label: 'Agregar sup. regada historica',
  disabled: true,
  onClick: function () {
    var currentLabel = c.historica.boton.getLabel();
    var selectedSHAC = c.selectSHAC.selector.getValue();
    var selectedBand = c.selectBand.selector.getValue();
    var newlink = ImgClass.histCollection(selectedSHAC, selectedBand, exceptions, claves, c, s);

    if (currentLabel == 'Agregar sup. regada historica') {
      if (newlink.length > 0) {
        for (var i = 0; i < newlink.length; i++) {
          // 1. Agregar layer
          var layer = ui.Map.Layer(newlink[i], visParamsHist, 'Superficie regada histórica');
          c.map.layers().set(i + 3, layer);
        }
        c.historica.boton.setLabel('Quitar sup. regada historica');
      }else{
        c.historica.warning.setValue('No existe imagen para SHAC seleccionado');
      }
      
    } else {
      // Eliminar capas con nombre "Superficie regada histórica"
      var layers = c.map.layers();
      for (var j = layers.length() - 1; j >= 0; j--) {
        var layerU = layers.get(j);
        
        if (layerU.getName() ==='Superficie regada histórica') {
          layers.remove(layerU); // Eliminar la capa
        }
      }

      // Restablecer el botón al estado inicial
      c.historica.boton.setLabel('Agregar sup. regada historica');
    }
  },
});

///////




//Point for onClick function
var pointLayer = null;


//Uso de Suelo
c.usoSuelo = {};
c.usoSuelo.legend = leyenda.createUsoSueloLegend();
c.usoSuelo.label = ui.Label('Uso de suelo');
c.usoSuelo.aboutLabel = ui.Label(
  'Información de la capa de uso de suelo ' +
  'para el SHAC seleccionado (Capa actualizada hasta el año 2020).');
c.usoSuelo.cerrar = ui.Button({
  label : 'Cerrar tabla Uso de Suelo',
  style: {stretch: 'horizontal', fontSize: '12px', padding: '1px'},
  onClick: function() {
    c.usoSuelo.panel.style().set('shown', false);
  }});
  
c.usoSuelo.buttonPanel = ui.Panel({
  widgets: [c.usoSuelo.cerrar],
});
c.usoSuelo.dynamicPanel = ui.Panel({
  // Panel para almacenar la informacion a presentar
  widgets: [],
});
c.usoSuelo.clase = ui.Label('');
c.usoSuelo.uso = ui.Label('');
c.usoSuelo.tipo = ui.Label('');
c.usoSuelo.esp1 = ui.Label('');
c.usoSuelo.esp2 = ui.Label('');
c.usoSuelo.esp3 = ui.Label('');
c.usoSuelo.esp4 = ui.Label('');
c.usoSuelo.esp5 = ui.Label('');
c.usoSuelo.esp6 = ui.Label('');
c.usoSuelo.variedad= ui.Label('');
c.usoSuelo.com =ui.Label('');
c.usoSuelo.prov =ui.Label('');
c.usoSuelo.ori =ui.Label('');
c.usoSuelo.pan1 = ui.Panel({style: {border: '1px solid black'}});

c.usoSuelo.panel = ui.Panel({
  widgets: [c.usoSuelo.buttonPanel, c.usoSuelo.dynamicPanel]});
c.usoSuelo.panel.style().set('shown', false);


c.usoSuelo.boton= ui.Button({
  label : 'Agregar capa de uso de suelo',
  onClick: function() {
    var currentLabel = c.usoSuelo.boton.getLabel();
    var layers = c.map.layers();
    var n = layers.length();
    var usExist = layerExists(layers, 'Uso de Suelo');
    var layer = ui.Map.Layer(styledUsoSuelo, {} ,'Uso de Suelo');
  if (currentLabel === 'Agregar capa de uso de suelo') {
    
      c.usoSuelo.legend.style().set('shown', true);
      c.usoSuelo.boton.setLabel('Quitar capa de uso de suelo');
      if (!usExist){
      //c.map.layers().set(n+1, layer); //se agrega a la ultima posicion 
      c.map.layers().insert(0, layer); // Insertar la capa en la posición 0 (primera posición)

        
      }
      else {

        layers.forEach(function(existingLayer) {
          if (existingLayer.getName() === 'Uso de Suelo') {
            existingLayer.setShown(true);

          }
        });
      }
    } 
    else {
      layers.forEach(function(existingLayer) {
          if (existingLayer.getName() === 'Uso de Suelo') {
            existingLayer.setShown(false);
          }
        });
      c.usoSuelo.boton.setLabel('Agregar capa de uso de suelo');
      c.usoSuelo.panel.style().set('shown', false);
      c.usoSuelo.legend.style().set('shown', false);
    }
  }
});




//Catastro frutícola
c.frut = {};
c.frut.label = ui.Label('Catastro frutícola');
c.frut.aboutLabel = ui.Label(
  'Información de la capa de catastro frutícola ' +
  '(Capa actualizada hasta el año 2023).');

c.frut.cerrar = ui.Button({
  label : 'Cerrar tabla Cat. Frutícola',
  style: {stretch: 'horizontal', fontSize: '12px', padding: '1px'},
  onClick: function() {
    c.frut.panel.style().set('shown', false);
  }});
  
c.frut.buttonPanel = ui.Panel({
  widgets: [c.frut.cerrar],
});
c.frut.dynamicPanel = ui.Panel({
  // Panel para almacenar la informacion a presentar
  widgets: [],
});
c.frut.com = ui.Label('');
c.frut.prov = ui.Label('');
c.frut.areas = ui.Label('');
c.frut.esp1 = ui.Label('');
c.frut.arb1 = ui.Label('');
c.frut.sup1 = ui.Label('');
c.frut.esp2 = ui.Label('');
c.frut.arb2 = ui.Label('');
c.frut.sup2 = ui.Label('');
c.frut.esp3 = ui.Label('');
c.frut.arb3 = ui.Label('');
c.frut.sup3 = ui.Label('');
c.frut.esp4 = ui.Label('');
c.frut.arb4 = ui.Label('');
c.frut.sup4 = ui.Label('');
c.frut.pan1 = ui.Panel({style: {border: '1px solid black'}});
c.frut.pan2 = ui.Panel({style: {border: '1px solid black'}});
c.frut.pan3 = ui.Panel({style: {border: '1px solid black'}});
c.frut.pan4 = ui.Panel({style: {border: '1px solid black'}});

c.frut.panel = ui.Panel({
  widgets: [c.frut.buttonPanel, c.frut.dynamicPanel]});
c.frut.panel.style().set('shown', false);


c.frut.boton = ui.Button({
  label: 'Agregar capa catastro frutícola',
  onClick: function() {
    var currentLabel = c.frut.boton.getLabel();
    var layers = c.map.layers();
    var n = layers.length();
    var catFrutExist = layerExists(layers, 'Catastro Frutícola');
    
    if (currentLabel === 'Agregar capa catastro frutícola') {
      // Check if the layer already exists
      if (!catFrutExist) {
        var layer = ui.Map.Layer(cat_frut, {}, 'Catastro Frutícola');
        c.map.layers().set(n, layer); // Add to the last position
      } else {
        layers.forEach(function(existingLayer) {
          if (existingLayer.getName() === 'Catastro Frutícola') {
            existingLayer.setShown(true);
          }
        });
      }
      c.frut.boton.setLabel('Quitar capa catastro frutícola');
    } else {
      layers.forEach(function(existingLayer) {
        if (existingLayer.getName() === 'Catastro Frutícola') {
          existingLayer.setShown(false);
        }
      });
      c.frut.panel.style().set('shown', false);
      c.frut.boton.setLabel('Agregar capa catastro frutícola');
    }
  }
});


//reset
c.resetButton = ui.Button({
  label : 'Borrar selecciones',
  onClick: function() {
    borrarSeleccion();
    
  }});

/*******************************************************************************
 * Composition *
 * 
 * A section to compose the app i.e. add child widgets and widget groups to
 * first-level parent components like control panels and maps.
 * 
 * Guidelines: There is a gradient between components and composition. There
 * are no hard guidelines here; use this section to help conceptually break up
 * the composition of complicated apps with many widgets and widget groups.
 ******************************************************************************/

c.controlPanel.add(c.info.panel);
c.controlPanel.add(c.dividers.divider1);
c.controlPanel.add(c.selectSHAC.panel);
c.controlPanel.add(c.selectBand.panel);
c.controlPanel.add(c.selectSHAC.warning);
c.controlPanel.add(c.historica.titleLabel);
c.controlPanel.add(c.historica.info);
c.controlPanel.add(c.historica.boton);
c.controlPanel.add(c.historica.warning);
c.controlPanel.add(c.dividers.divider2);
c.controlPanel.add(c.usoSuelo.label);
c.controlPanel.add(c.usoSuelo.aboutLabel);
c.controlPanel.add(c.usoSuelo.boton);
c.controlPanel.add(c.dividers.divider3);
c.controlPanel.add(c.frut.label);
c.controlPanel.add(c.frut.aboutLabel);
c.controlPanel.add(c.frut.boton);
c.controlPanel.add(c.dividers.divider4);
c.controlPanel.add(c.resetButton);
c.controlPanel.add(c.dividers.divider5);
c.controlPanel.add(c.downloadBand.panel);
c.controlPanel.add(panelLicencias);
c.map.add(c.frut.panel);
c.map.add(c.usoSuelo.legend);



var senVis = shac_layer.style({
  color: 'black', // Color gris para el borde
  width: 1.5,        // Ancho del borde
  fillColor: '00000000', // Sin color de relleno (transparente)
  lineType: 'dashed' // Tipo de línea punteada
});

var layerSensor = ui.Map.Layer(shac_layer,senVis, 'SHACS');
c.map.addLayer(senVis, null, 'SHACS');
c.map.add(c.usoSuelo.panel);

  
ui.root.clear();
ui.root.add(c.controlPanel);
ui.root.add(c.map);


/*******************************************************************************
 * Styling *
 * 
 * A section to define and set widget style properties.
 * Styles are defined in Style.js and imported as a module here with the 
 * name of "s". 
 * 
 ******************************************************************************/

c.licencias.copernicus.style().set(s.aboutText);      
c.licencias.nasa.style().set(s.aboutText);     
c.licencias.chirps.style().set(s.aboutText); 
           
c.info.titleLabel.style().set({
  fontSize: '20px',
  fontWeight: 'bold'
});
c.historica.titleLabel.style().set(s.widgetTitle);
c.info.titleLabel.style().set(s.bigTopMargin);
c.info.aboutLabel.style().set(s.aboutText);
c.info.paperLabel.style().set(s.aboutText);
c.info.paperLabel.style().set(s.smallBottomMargin);
c.info.websiteLabel.style().set(s.aboutText);
c.info.websiteLabel.style().set(s.noTopMargin);

c.selectSHAC.selector.style().set(s.stretchHorizontal);
c.selectSHAC.label.style().set(s.widgetTitle);
c.historica.info.style().set(s.aboutText);
c.historica.boton.style().set(s.stretchHorizontal);
c.selectBand.selector.style().set(s.stretchHorizontal);
c.usoSuelo.label.style().set(s.widgetTitle);
c.usoSuelo.boton.style().set(s.stretchHorizontal);
c.frut.label.style().set(s.widgetTitle);
c.frut.boton.style().set(s.stretchHorizontal);
c.frut.aboutLabel.style().set(s.aboutText);
c.controlPanel.style().set(s.controlPanel);

c.map.style().set({
  cursor: 'crosshair'
});


c.usoSuelo.boton.style().set(s.widgetTitle);
c.usoSuelo.aboutLabel.style().set(s.aboutText);
c.usoSuelo.cerrar.style().set(s.buttonStyle);
c.usoSuelo.panel.style().set(s.opacityWhiteMed);
c.usoSuelo.panel.style().set({position: 'top-left'});

c.usoSuelo.ori.style().set(s.greyLabel);
c.usoSuelo.com.style().set(s.whiteLabel);
c.usoSuelo.prov.style().set(s.greyLabel);
c.usoSuelo.uso.style().set(s.whiteLabel);
c.usoSuelo.tipo.style().set(s.greyLabel);
c.usoSuelo.variedad.style().set(s.whiteLabel);
c.usoSuelo.esp1.style().set(s.greyLabel);
c.usoSuelo.esp2.style().set(s.whiteLabel);
c.usoSuelo.esp3.style().set(s.greyLabel);
c.usoSuelo.esp4.style().set(s.whiteLabel);
c.usoSuelo.esp5.style().set(s.greyLabel);
c.usoSuelo.esp6.style().set(s.whiteLabel);

c.frut.panel.style().set(s.opacityWhiteMed);
c.frut.panel.style().set({position: 'bottom-left'});
c.frut.com.style().set(s.greyLabel);
c.frut.prov.style().set(s.whiteLabel);
c.frut.areas.style().set(s.whiteLabel);
c.frut.esp1.style().set(s.greyLabel);
c.frut.arb1.style().set(s.whiteLabel);
c.frut.sup1.style().set(s.greyLabel);
c.frut.esp2.style().set(s.whiteLabel);
c.frut.arb2.style().set(s.greyLabel);
c.frut.sup2.style().set(s.whiteLabel);
c.frut.esp3.style().set(s.greyLabel);
c.frut.arb3.style().set(s.whiteLabel);
c.frut.sup3.style().set(s.greyLabel);
c.frut.esp4.style().set(s.whiteLabel);
c.frut.arb4.style().set(s.greyLabel);
c.frut.sup4.style().set(s.whiteLabel);
c.resetButton.style().set(s.stretchHorizontal);

// Loop through setting divider style.
Object.keys(c.dividers).forEach(function(key) {
  c.dividers[key].style().set(s.divider);
});

/*******************************************************************************
 * Behaviors *
 * 
 * A section to define app behavior on UI activity.
 * 
 * Guidelines:
 * 1. At the top, define helper functions and functions that will be used as
 *    callbacks for multiple events.
 * 2. For single-use callbacks, define them just prior to assignment. If multiple
 *    callbacks are required for a widget, add them consecutively to maintain
 *    order; single-use followed by multi-use.
 * 3. As much as possible, include callbacks that update URL parameters.
 ******************************************************************************/



function borrarSeleccion(){
  var actualLayers = c.map.layers();
  var shac =c.selectSHAC.selector.getValue();
  var temp = c.selectBand.selector.getValue();
  var catFrutExist = layerExists(actualLayers, 'Catastro Frutícola');
  var usoSueloExist = layerExists(actualLayers, 'Uso de Suelo');
  
  //1. Recentrar
  c.map.setCenter({
  lon: ui.url.get('lon', -70.3),
  lat: ui.url.get('lat', -32.9),
  zoom: ui.url.get('zoom', 8)
    });

 //2. SHAC
 if(shac!== null){
  c.selectSHAC.selector.setValue(null);
 }
 // 3. Punto rojo
  if (pointLayer) {
      actualLayers.remove(pointLayer); // Remove the previous point layer
  }
  // 4. Temporada
  if(temp!== null){
    c.selectBand.selector.setValue(null);
    for (var i = 0; i < actualLayers.length(); i++) {
      var layer = actualLayers.get(i);
      if (layer.getName() === 'Superficie regada') {
        c.map.remove(layer);
        break;
      }
    }

  }
  
  // 5. Uso de Suelo
  if(usoSueloExist){
    c.usoSuelo.legend.style().set('shown', false);
    c.usoSuelo.boton.setLabel('Agregar capa de uso de suelo');
    c.usoSuelo.panel.style().set('shown', false);
     actualLayers.forEach(function(existingLayer) {
          if (existingLayer.getName() === 'Uso de Suelo') {
            existingLayer.setShown(false);
          }
        });
  }
  
  //6. Catastro Fruticola
  if(catFrutExist){
    c.frut.boton.setLabel('Agregar capa catastro frutícola');
    c.frut.panel.style().set('shown', false);
    actualLayers.forEach(function(existingLayer) {
          if (existingLayer.getName() === 'Catastro Frutícola') {
            existingLayer.setShown(false);
          }
        });
      
  }
  // 7. Borrar etiquetas
    resetLabels();
}



function resetLabels(){
  [c.downloadBand.kmlLabel, c.downloadBand.gjsonLabel].forEach(function(labelArray) {
        labelArray.forEach(function(label) {
          label.style().set(s.disableLabel);
          label.setValue('');
        });
      });
      
      c.downloadBand.title.setValue('');
      c.selectSHAC.warning.setValue('');
      c.historica.warning.setValue('');
}



/*******************************************************************************
 * Initialize *
 * 
 * A section to initialize the app state on load.
 * 
 * Guidelines:
 * 1. At the top, define any helper functions.
 * 2. As much as possible, use URL params to initialize the state of the app.
 ******************************************************************************/

// Set model state based on URL parameters or default values.
c.map.setCenter({
  lon: ui.url.get('lon', -70.3),
  lat: ui.url.get('lat', -32.9),
  zoom: ui.url.get('zoom', 8)
});

function handleMouseMove(coords) {
  ShacClass.updateTooltip(coords, shac_layer, c.sensores.panel);
}

// Capturar eventos del ratón en la capa
//c.map.onClick(handleMouseMove);

var chartWidget = null; // Var para almacenar el grafico

c.map.onClick(function(coords) {
  
    var actualLayers = c.map.layers();
    var clickedPoint = ee.Geometry.Point(coords.lon, coords.lat);
    
    var catFrutExist = layerExists(actualLayers, 'Catastro Frutícola');
    var usoSueloExist = layerExists(actualLayers, 'Uso de Suelo');
    
    var catFrutVis = layerVisible(actualLayers, 'Catastro Frutícola');
    print('catFrutVis', catFrutVis);
    var usoSueloVis = layerVisible(actualLayers, 'Uso de Suelo');
    print('usoSueloVis', usoSueloVis);
    
    // 1. Seleccionar SHAC si no hay uso de suelo ni catastro fruticola
    if(!catFrutExist && !usoSueloExist){
      
    ShacClass.onClickSHAC(coords.lon, coords.lat, c,region, shac_layer);
      }
    // 2. Remover punto anterior y Colocar punto 
    
    if (pointLayer) {
      actualLayers.remove(pointLayer); // Remove the previous point layer
    }
    pointLayer = ui.Map.Layer(clickedPoint, {color: 'red'}, 'Punto seleccionado');
    actualLayers.add(pointLayer);
    
    // 3. Agregar tabla de cat. fruticola
    if (catFrutExist && catFrutVis) { //si existe e intersecta con el valor
      catClass.actualizarCatFrut(clickedPoint, Rcat_frut, valparaisoComunas,c);
    } else {
      // Si no hay datos para las coordenadas clickeadas, esconder el panel
      c.frut.panel.style().set('shown', false);
      }
      
    // 4. Agregar tabla de uso de suelo
    
    if (usoSueloExist && usoSueloVis) { //si existe e intersecta con el valor
      usoClass. actualizarUsoSuelo(clickedPoint, uso_suelo,c);
      
    } else {
      // Si no hay datos para las coordenadas clickeadas, esconder el panel
      c.usoSuelo.panel.style().set('shown', false);
      }
      
   
  
});
  

print(c);
var endTime = new Date().getTime();

var executionTime = endTime - startTime;

// Imprimir el tiempo de ejecución en la consola
print('Tiempo de ejecución (ms):', executionTime);